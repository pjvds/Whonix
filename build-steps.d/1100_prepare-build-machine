#!/bin/bash

# This file is part of Whonix
# Copyright (C) 2012 - 2013 adrelanos <adrelanos at riseup dot net>
# See the file COPYING for copying conditions.

set -x

true "Currently running script: $0"

MYDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

cd "$MYDIR"
cd ..
cd help-steps

WHONIX_BUILD_PARSED="1"
VMNAME="internalrun"
no_git="1"

source pre
source variables

prepare-build-machine() {
   trap "error_handler_general" ERR INT TERM

   ## If whonix_build is run with --fast1 switch.
   if [ "$WHONIX_BUILD_FAST1" = "1" ]; then
      echo "${bold}${cyan}INFO: run with --fast1 switch, skipping $0. ${reset}"
      exit 0
   fi

   ## Debugging.
   true "${bold}${cyan}INFO: PWD: $PWD ${reset}"

   ## Check if user "$USERNAME" already exist.
   local id_return="0"
   id "$USERNAME" || { local id_return="$?" ; true; };
   if [ ! "$id_return" = 0 ]; then
      true 'INFO: Creating user "$USERNAME" with password "changeme", because some things have to be run as "$USERNAME".'
      ## setting password of user "user" to changeme
      ##
      ## How this password was created:
      ## sudo apt-get install whois
      ## mkpasswd
      ## changeme
      ## Resulted in: aTayYxVyw5kDo
      useradd --password aTayYxVyw5kDo --user-group --create-home --shell /bin/bash "$USERNAME"
   else
      true "${cyan}INFO: Not creating user \"$USERNAME\" with password \"changeme\", because it already exists.${reset}"
   fi

   ## Add user to sudo group.
   addgroup "$USERNAME" sudo

   if [ ! "$WHONIX_BUILD_UPGRADE_BUILD_MACHINE" = "0" ]; then
      ## Always keep old configuration file. Do not prompt to install new config files.
      local extra_apt_opt="--option Dpkg::Options=--force-confold"
   fi

   true "${cyan}INFO: Using longer timeout to allow more reliably downloading using apt-get over Tor. Feel free to out comment extra_apt_timeout in help-steps/variables.${reset}"

   ## Using an apt cache to speed up downloading
   ## If you want to build multiple times (for debugging etc.),
   ## it makes sense to install a local apt proxy on your build machine.
   ## That safes download time and traffic.
   ##
   ## Minor: If you build Whonix on Whonix, apt-cacher-ng will go through Tor's TransPort.
   ##
   ## Thanks to source:
   ##    https://linuxexpresso.wordpress.com/2011/02/13/howto-apt-cacher-ng-on-ubuntu/
   ## It would be possible to download without an apt-cacher...
   ## But why? If you do not want to use it, comment out the following line and
   ## change the mirror settings in grml configuration file.

   ## Check if apt-cacher-ng is installed.
   local dpkg_return="0"
   dpkg --status apt-cacher-ng 1>/dev/null 2>/dev/null || { local dpkg_return="$?" ; true; };

   if [ ! "$dpkg_return" = "0" ]; then
      ## Update package lists and install apt-cacher-ng.
      apt-get $extra_apt_timeout update
      apt-get install $extra_apt_opt $extra_apt_timeout --yes apt-cacher-ng
   fi

   ## Restart apt-cacher-ng.
   ## Should not be required, but it was for me.
   service apt-cacher-ng restart

   ## Check status of apt-cacher-ng.
   service apt-cacher-ng status

   ## Enable apt-cacher-ng proxy.
   export http_proxy="http://127.0.0.1:3142"

   if [ ! "$WHONIX_BUILD_UPGRADE_BUILD_MACHINE" = "0" ]; then
      ## Update package lists and upgrade.
      apt-get $extra_apt_timeout update
      apt-get $extra_apt_opt $extra_apt_timeout --yes dist-upgrade
   fi

   ###############################################
   ## Build Dependencies for Whonix Build Script #
   ###############################################
   ## - required for sudo -u user
   ##      sudo
   ## - for creating valid man pages in roff format from man folder (ronn format)
   ##      ruby-ronn
   ## - required for build step "verify files"
   ##      diffutils
   ## - required for creating .deb packages
   ##      debhelper
   ## - required for debug-steps/copy-into-img
   ##      rsync
   ## - required for some dialog based upstream (Debian) postinst scripts
   ##      dialog
   ## - faster creation of local OpenPGP APT repository signing key
   ##   and better entropy during build
   ##      haveged
   ## - required for creating .deb packages, contains debchange (dch),
   ##   used for automatically bumping the version number in debian/changelog
   ##      devscripts
   ## - required for creating an upstream tarball (git archive) and for
   ##   creating a version number (git describe)
   ##      git
   ## - required for creating (local) APT repository
   ##      reprepro
   ## - required to silence dpkg-gencontrol:
   ##   warning: File::FcntlLock not available; using flock which is not NFS-safe
   ##   http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=677865
   ##       libfile-fcntllock-perl
   ## - required for modifying configuration files owned by other .deb packages
   ##      config-package-dev
   ## - required for creating .deb packages
   ##      dh-apparmor
   ## - required for "make clean"
   ##      gawk
   ## - bash-completion
   ##      bash-completion
   ## - grep
   ##      grep
   ## - Debian APT repository archive keyring.
   ##      debian-archive-keyring
   apt-get install $extra_apt_timeout $extra_apt_opt --yes \
      sudo \
      ruby-ronn \
      diffutils \
      debhelper \
      rsync \
      dialog \
      haveged \
      devscripts \
      git \
      reprepro \
      libfile-fcntllock-perl \
      config-package-dev \
      dh-apparmor \
      gawk \
      bash-completion \
      grep \
      debian-archive-keyring

   if [ "$BARE_METAL" = "1" ]; then
      ###########################################
      ## Build Dependency for Bare Metal Builds #
      ###########################################
      true
   else
      ##################################################################
      ## Build Dependencies for creating Virtual Machine Images (.img) #
      ##################################################################
      ## - for grml-debootstrap
      ##      grml-debootstrap kpartx mksh parted qemu-utils
      ## - for creating VirtualBox VM images
      ##      virtualbox
      apt-get install $extra_apt_timeout $extra_apt_opt --yes \
         qemu-utils \
         grml-debootstrap \
         parted \
         kpartx \
         mksh

      #######################################################################
      ## Build Dependencies for creating VirtualBox Images (.vdi and .ova) #
      #######################################################################
      ## Quick fix to install virtualbox on wercker labs environment
      apt-get install dkms
      wget -q http://download.virtualbox.org/virtualbox/debian/oracle_vbox.asc -O- | sudo apt-key add -
      sh -c 'echo "deb http://download.virtualbox.org/virtualbox/debian raring contrib" >> /etc/apt/sources.list.d/virtualbox.list'
      apt-get update
      apt-get install $extra_apt_timeout $extra_apt_opt --yes \
         virtualbox-4.2
   fi

   ## Hack for Ubuntu 12.04 Precise Pangolin / Travis CI.
   ## Check if config-package-dev with debhelper support is installed.
   ## (Build Dependency for Whonix Build Script for creating .deb packages.)
   if [ ! -d "/usr/share/doc/config-package-dev/examples/debhelper/" ]; then
      ## Adding temporary repository, because we need config-package-dev with debhelper support.
      local TEMP="/etc/apt/sources.list.d/whonix_temp.list"
      #echo "deb http://ftp.us.debian.org/debian testing main" > "$TEMP"
      echo "deb http://us.archive.ubuntu.com/ubuntu/ saucy main universe" > "$TEMP"

      ## Update package lists and install config-package-dev from temporary repository.
      apt-get update \
         $extra_apt_timeout \
         -o Dir::Etc::sourcelist="$TEMP" \
         -o Dir::Etc::sourceparts="-" \
         -o APT::Get::List-Cleanup="0"

      ## Old: -t testing
      apt-get install \
         $extra_apt_timeout \
         $extra_apt_opt \
         --target-release saucy \
         config-package-dev

      ## Removing temporary repository.
      rm --force "$TEMP"

      ## Update package lists again to get rid of temporary repository.
      apt-get update \
         --no-download \
         --list-cleanup
   fi

   ##Should there ever be a problem with apt-cacher-ng (package verification failure) (rare cases), use this.
   #sudo apt-get update
   #sudo apt-get autoremove
   #sudo apt-get dist-upgrade
   #sudo apt-get clean
   #sudo apt-get autoclean

   ## Disable apt-cacher-ng proxy.
   unset http_proxy

   ## Debugging.
   cat /usr/sbin/policy-rc.d || true

   if [ "$CI" = "true" ]; then
      ## Ensure, that haveged is functional on travis-ci machines.
      service haveged restart
      service haveged start
      ## Fails on travis-ci machines?!
      service haveged status || true

      ## Debugging.
      /etc/init.d/haveged restart || true
      /etc/init.d/haveged start || true
      ## Fails on travis-ci machines?!
      /etc/init.d/haveged status || true
   else
      ## Debugging.
      service haveged status
   fi

   ## Trying to work around a Travis CI specific build error while running grml-debootstrap.
   ##
   ## /proc/devices: No entry for misc found
   ## Is device-mapper driver missing from kernel?
   ## Failure to communicate with kernel device-mapper driver.
   ## device mapper prerequisites not met
   ## * Error setting up loopback device.
   ## -> Failed (rc=1)
   ##
   ## Debugging.
   ## Check if device-mapper is in /proc/devices. || true to overwrite, if not.
   grep device-mapper /proc/devices || true
   ## According to http://www.tldp.org/HOWTO/LVM-HOWTO/builddmmod.html
   modprobe dm_mod || true
   ## Check again if device-mapper is in /proc/devices. || true to overwrite, if not.
   grep device-mapper /proc/devices || true

   ## Debugging.
   cat /proc/devices

   if [ "$CI" = "true" ]; then
      true "${bold}${red}INFO: CI detected. Linking /dev/urandom to /dev/random. In \
CI environment, there is usually very little entropy. Therefore gpg key \
creation takes very long. Since no images are deployed from CI systems, we \
can do this. Do not deploy these images! ${reset}"
      ## || true to support re-running the script.
      mv /dev/random /dev/random_orig || true
      ln -s /dev/urandom /dev/random || true
   fi

   ## Debugging CI.
   if [ "$CI" = "true" ]; then
      ls -la "/etc/resolv.conf"
      cat "/etc/resolv.conf"
      ls -la "/etc/hostname"
      cat "/etc/hostname"
      ls -la "/etc/hosts"
      cat "/etc/hosts"
      hostname
      hostname --all-fqdns
      hostname --long
   fi
}

true "${bold}INFO: Currently running script: $0${reset}"
prepare-build-machine
true "${bold}INFO: End of: $0 No error detected.${reset}"
